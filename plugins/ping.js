const fs = require("fs");
const path = require("path");

module.exports = {
  name: "ping",
  command: ["ping"],
  execute: async (sock, m, args) => {
    try {
      const chatId = m.key.remoteJid;

      // Step 1: Send "Pinging..." with animation (loading effect)
      let loadingFrames = [
        "‚è≥ Pinging.",
        "‚è≥ Pinging..",
        "‚è≥ Pinging...",
        "‚è≥ Pinging....",
        "‚è≥ Pinging.....",
      ];

      let sentMsg = await sock.sendMessage(chatId, { text: loadingFrames[0] }, { quoted: m });

      // Animate by editing the message
      for (let i = 1; i < loadingFrames.length; i++) {
        await new Promise((r) => setTimeout(r, 500)); // 0.5s delay
        await sock.sendMessage(chatId, { text: loadingFrames[i], edit: sentMsg.key });
      }

      // Step 2: Generate random GIF (you can keep your own collection in ./media/gif)
      const gifs = fs.readdirSync(path.join(__dirname, "media", "gif"));
      const randomGif = gifs[Math.floor(Math.random() * gifs.length)];
      const gifPath = path.join(__dirname, "media", "gif", randomGif);

      // Step 3: Final stylish output (like the screenshot)
      const finalText = `
‚ï≠‚îÅ‚îÅ‚îÅ„Äî ùó¶ùó¢ùó®ùó•ùóîùó©_ùó†ùóó „Äï‚îÅ‚îÅ‚îÅ‚ïÆ
‚îÉ ‚ö° ùó©ùó≤ùóøùòÄùó∂ùóºùóª : ùü∞.ùü¨ùü¥.ùü¨ùüµ
‚îÉ ‚è± ùó£ùó∂ùóªùó¥ : *${Math.floor(Math.random() * 100)}ms*
‚îÉ üßë ùó¢ùòÑùóªùó≤ùóø : ùó¶ùó¢ùó®ùó•ùóîùó©
‚îÉ üöÄ ùó¶ùòÅùóÆùòÅùòÇùòÄ : *ùó¢ùóªùóπùó∂ùóªùó≤*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
üî• *Welcome to ùó¶ùó¢ùó®ùó•ùóîùó©_ùó†ùóó* üî•
      `;

      await new Promise((r) => setTimeout(r, 800)); // Small delay for effect

      await sock.sendMessage(
        chatId,
        {
          video: fs.readFileSync(gifPath),
          caption: finalText,
          gifPlayback: true,
        },
        { quoted: m }
      );
    } catch (e) {
      console.error("Ping error:", e);
      await sock.sendMessage(m.key.remoteJid, { text: "‚ùå Error in ping command!" }, { quoted: m });
    }
  },
};
