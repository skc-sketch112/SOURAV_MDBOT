module.exports = {
  name: "animation",
  command: [
    "animation", "hack", "blast", "volcano", "earthquake", "tsunami", "rain",
    "storm", "flood", "galaxy", "blackhole", "supernova", "bigbang",
    "wormhole", "cosmicstorm", "starblast", "nebula", "timewarp"
  ],
  description: "Hack, Blast, Weather & Space animations in one plugin",

  async execute(sock, m, args) {
    const jid = m.key.remoteJid;

    // Extract body text
    let body = m.message.conversation || m.message.extendedTextMessage?.text || "";
    let prefix = body.trim().split(" ")[0];
    let cmd = prefix.replace(/^\./, "").toLowerCase();

    // Animation dictionary
    const animations = {
      hack: [
        "üíª Connecting to mainframe...",
        "üîç Bypassing firewall...",
        "‚ö° Injecting payload...",
        "üìÇ Extracting data...",
        "‚úÖ Hack complete!"
      ],
      blast: [
        "üí£ Arming explosives...",
        "üî• Countdown 3...",
        "üî• Countdown 2...",
        "üî• Countdown 1...",
        "üí•üí• BOOOOOOM üí•üí•"
      ],
      volcano: [
        "üåã Lava rising...",
        "üî• Pressure building...",
        "‚ö° Earth shaking...",
        "üí• VOLCANO ERUPTION üí•"
      ],
      earthquake: [
        "üåç Ground trembling...",
        "‚ö° Seismic waves detected...",
        "üèöÔ∏è Buildings shaking...",
        "‚ò†Ô∏è EARTHQUAKE STRIKES ‚ò†Ô∏è"
      ],
      tsunami: [
        "üåä Ocean pulling back...",
        "‚ö° Energy building...",
        "üåä GIANT WAVE RISING...",
        "üí• TSUNAMI ENGULFS LAND üí•"
      ],
      rain: [
        "‚òÅÔ∏è Clouds gathering...",
        "üíß Droplets forming...",
        "üåßÔ∏è Heavy rainfall begins...",
        "‚ö° Thunder roaring...",
        "üåà Rain ends with rainbow üåà"
      ],
      storm: [
        "üå´Ô∏è Winds picking up...",
        "‚ö° Thunder rumbling...",
        "üå™Ô∏è Storm intensifying...",
        "‚ò†Ô∏è MASSIVE STORM ARRIVES ‚ò†Ô∏è"
      ],
      flood: [
        "üíß Water levels rising...",
        "üèûÔ∏è Rivers overflowing...",
        "üåä FLOODING CITIES...",
        "‚ò†Ô∏è FLOOD DISASTER ‚ò†Ô∏è"
      ],
      galaxy: [
        "‚ú® Gathering stardust...",
        "üåå Stars forming...",
        "üå† Galaxy spiral forming...",
        "‚ö° Rotating universe...",
        "üåç Galaxy complete üåå"
      ],
      blackhole: [
        "‚ö´ Massive star collapsing...",
        "‚ö´ Gravity pulling everything...",
        "üåå Space bending...",
        "üí´ Light disappearing...",
        "‚ò†Ô∏è BLACK HOLE ENGULFS ALL ‚ò†Ô∏è"
      ],
      supernova: [
        "üåü Massive star heating...",
        "üî•üî• Nuclear fusion raging...",
        "‚ö° Core collapsing...",
        "üí• SUPERNOVA EXPLOSION üí•",
        "‚ú® Elements spread across galaxy ‚ú®"
      ],
      bigbang: [
        "üåë Universe in silence...",
        "‚ö° Energy concentrating...",
        "üî•üî•üî•üî•üî•",
        "üí• BIG BANG üí•",
        "üåå Universe expanding üåå"
      ],
      wormhole: [
        "üåå Space tearing apart...",
        "‚ö° Energy spiraling...",
        "üåÄ Wormhole opening...",
        "üöÄ Entering wormhole...",
        "‚ú® Teleported across galaxy ‚ú®"
      ],
      cosmicstorm: [
        "üå† Stars trembling...",
        "‚ö° Cosmic energy gathering...",
        "üåå Dark matter swirling...",
        "üí• COSMIC STORM üí•",
        "‚ò†Ô∏è Universe shakes ‚ò†Ô∏è"
      ],
      starblast: [
        "üåü Star burning brighter...",
        "üî• Flames raging...",
        "üí• STAR BLAST üí•",
        "‚ö° Solar flares unleashed ‚ö°"
      ],
      nebula: [
        "‚òÅÔ∏è Interstellar gas forming...",
        "‚ú® Lights glowing...",
        "üåå Nebula expanding...",
        "üå† NEBULA CREATED üå†"
      ],
      timewarp: [
        "‚è≥ Time bending...",
        "‚ö° Past & future colliding...",
        "üåÄ Time warp opening...",
        "üí• Timeline distorted üí•",
        "‚ú® You‚Äôre in another era ‚ú®"
      ]
    };

    // If user typed ".animation" ‚Üí show command list
    if (cmd === "animation") {
      let list = Object.keys(animations).map(c => `.${c}`).join("\n");
      return await sock.sendMessage(jid, { text: `‚ú® *Available Animations:*\n\n${list}` }, { quoted: m });
    }

    // If invalid animation command
    if (!animations[cmd]) {
      return await sock.sendMessage(jid, { text: "‚ö†Ô∏è Invalid animation command! Type *.animation* for list." }, { quoted: m });
    }

    // Send animation frames
    const frames = animations[cmd];
    let sent = await sock.sendMessage(jid, { text: frames[0] }, { quoted: m });

    for (let i = 1; i < frames.length; i++) {
      await new Promise(r => setTimeout(r, 1500)); // delay between frames
      await sock.sendMessage(jid, { edit: sent.key, text: frames[i] });
    }
  }
};
