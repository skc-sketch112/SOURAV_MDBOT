// fancy2.js
// Fancy Text Generator v2 (50+ unique font styles)

module.exports = {
    name: "fancy2",
    command: ["fancy2", "font2", "style2"],
    description: "Convert text into 50+ fancy fonts (choose style)",

    execute: async (sock, m, args) => {
        try {
            if (!args || args.length < 2) {
                return sock.sendMessage(
                    m.key.remoteJid,
                    { text: "‚ö†Ô∏è Usage: .fancy2 <style> <text>\nExample: .fancy2 bold hello world" },
                    { quoted: m }
                );
            }

            const styleName = args[0].toLowerCase();
            const text = args.slice(1).join(" ");

            // üî• Full set of 50+ unique font styles
            const fonts = {
                bold: "ùóÆùóØùó∞ùó±ùó≤ùó≥ùó¥ùóµùó∂ùó∑ùó∏ùóπùó∫ùóªùóºùóΩùóæùóøùòÄùòµùò∂ùòÉùòÑùòÖùòÜùòá",
                italic: "ùò¢ùò£ùò§ùò•ùò¶ùòßùò®ùò©ùò™ùò´ùò¨ùò≠ùòÆùòØùò∞ùò±ùò≤ùò≥ùò¥ùòµùò∂ùò∑ùò∏ùòπùò∫ùòª",
                bolditalic: "ùôñùôóùôòùôôùôöùôõùôúùôùùôûùôüùô†ùô°ùô¢ùô£ùô§ùô•ùô¶ùôßùô®ùô©ùô™ùô´ùô¨ùô≠ùôÆùôØ",
                monospace: "ùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£",
                script: "ùì™ùì´ùì¨ùì≠ùìÆùìØùì∞ùì±ùì≤ùì≥ùì¥ùìµùì∂ùì∑ùì∏ùìπùì∫ùìªùìºùìΩùìæùìøùîÄùîÅùîÇùîÉ",
                boldscript: "ùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùì•ùì¶ùìßùì®ùì©".toLowerCase(),
                fraktur: "ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑",
                boldfraktur: "ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´",
                double: "ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´".toUpperCase(),
                wide: "ÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔΩóÔΩòÔΩôÔΩö",
                smallcaps: "·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ Äs·¥õ·¥ú·¥†·¥°x è·¥¢",
                upside: "…êq…îp«ù…ü∆É…•·¥â…æ û Ö…Øuodb…πs án å çx éz",
                tiny: "·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞·∂¶ ≤·µèÀ°·µê‚Åø·µí·µñ·ë´ ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª",
                strike: "aÃ∂bÃ∂cÃ∂dÃ∂eÃ∂fÃ∂gÃ∂hÃ∂iÃ∂jÃ∂kÃ∂lÃ∂mÃ∂nÃ∂oÃ∂pÃ∂qÃ∂rÃ∂sÃ∂tÃ∂uÃ∂vÃ∂wÃ∂xÃ∂yÃ∂zÃ∂",
                underline: "aÃ≤bÃ≤cÃ≤dÃ≤eÃ≤fÃ≤gÃ≤hÃ≤iÃ≤jÃ≤kÃ≤lÃ≤mÃ≤nÃ≤oÃ≤pÃ≤qÃ≤rÃ≤sÃ≤tÃ≤uÃ≤vÃ≤wÃ≤xÃ≤yÃ≤zÃ≤",
                bubble: "‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©",
                square: "üÖ∞üÖ±üÖ≤üÖ≥üÖ¥üÖµüÖ∂üÖ∑üÖ∏üÖπüÖ∫üÖªüÖºüÖΩüÖæüÖøüÜÄüÜÅüÜÇüÜÉüÜÑüÜÖüÜÜüÜáüÜàüÜâ",
                blacksquare: "‚¨õüÑ±üÑ≤üÑ≥üÑ¥üÑµüÑ∂üÑ∑üÑ∏üÑπüÑ∫üÑªüÑºüÑΩüÑæüÑøüÖÄüÖÅüÖÇüÖÉüÖÑüÖÖüÖÜüÖáüÖàüÖâ",
                cursive: "ùí∂ùí∑ùí∏ùíπùëíùíªùëîùíΩùíæùíøùìÄùìÅùìÇùìÉùëúùìÖùìÜùìáùìàùìâùìäùìãùìåùìçùìéùìè",
                fancy: "…ë–≤…îd—îf…¢–ΩŒπjŒ∫l–ºŒ∑œÉœÅq—èsœÑœÖv—àx—Éz",
                slant: "ùëéùëèùëêùëëùëíùëìùëî‚Ñéùëñùëóùëòùëôùëöùëõùëúùëùùëûùëüùë†ùë°ùë¢ùë£ùë§ùë•ùë¶ùëß",
                shadow: "aÃ∑bÃ∑cÃ∑dÃ∑eÃ∑fÃ∑gÃ∑hÃ∑iÃ∑jÃ∑kÃ∑lÃ∑mÃ∑nÃ∑oÃ∑pÃ∑qÃ∑rÃ∑sÃ∑tÃ∑uÃ∑vÃ∑wÃ∑xÃ∑yÃ∑zÃ∑",
                dots: "·∫°·∏Öƒã·∏çƒó·∏üƒ°·∏•·ªãƒµ·∏≥·∏∑·πÅ·πÖ·ªç·πóq·πõ·π°·π≠·ª•·πø·∫á·∫ã·∫è·∫ì",
                stars: "a‚òÖb‚òÖc‚òÖd‚òÖe‚òÖf‚òÖg‚òÖh‚òÖi‚òÖj‚òÖk‚òÖl‚òÖm‚òÖn‚òÖo‚òÖp‚òÖq‚òÖr‚òÖs‚òÖt‚òÖu‚òÖv‚òÖw‚òÖx‚òÖy‚òÖz",
                waves: "aÃ¥bÃ¥cÃ¥dÃ¥eÃ¥fÃ¥gÃ¥hÃ¥iÃ¥jÃ¥kÃ¥lÃ¥mÃ¥nÃ¥oÃ¥pÃ¥qÃ¥rÃ¥sÃ¥tÃ¥uÃ¥vÃ¥wÃ¥xÃ¥yÃ¥zÃ¥",
                glitch: "aÃ∑bÃ∑cÃ∑dÃ∑eÃ∑fÃ∑gÃ∑hÃ∑iÃ∑jÃ∑kÃ∑lÃ∑mÃ∑nÃ∑oÃ∑pÃ∑qÃ∑rÃ∑sÃ∑tÃ∑uÃ∑vÃ∑wÃ∑xÃ∑yÃ∑zÃ∑",
                magic: "‡∏Ñ‡πíœÇ‡πî—î≈¶ÔªÆ—í‡πÄ◊ü–∫…≠‡πì‡∏†‡πè◊ß·ª£–≥‡∏£’á‡∏¢◊©‡∏¨◊ê◊•’π",
                greek: "Œ±Œ≤œÇŒ¥ŒµœÜŒ≥Œ∑Œπœ≥Œ∫ŒªŒºŒΩŒøœÅœôœÅœÉœÑœÖœëœâœáœàŒ∂",
                gothic: "ùñÜùñáùñàùñâùñäùñãùñåùñçùñéùñèùñêùñëùñíùñìùñîùñïùññùñóùñòùñôùñöùñõùñúùñùùñûùñü",
                serif: "ùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥",
                sans: "ùñ∫ùñªùñºùñΩùñæùñøùóÄùóÅùóÇùóÉùóÑùóÖùóÜùóáùóàùóâùóäùóãùóåùóçùóéùóèùóêùóëùóíùóì",
                fullwidth: "Ôº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫".toLowerCase(),
                invert: "‚àÄqœΩ·ó°∆é‚Ñ≤‚ÖÅHI≈ø ûÀ•WNO‘ÄŒå·¥öS‚ä•‚à©ŒõMX‚ÖÑZ".toLowerCase(),
                funky: "ÂçÇ‰πÉÂåö·ó™‰πáÂçÉ·é∂ÂçÑ‰∏®Ôæå“ú„Ñ•Áà™Âá†„ÑñÂç©…äÂ∞∫‰∏Ç„Ñí„Ñ©·êØÂ±±‰πÇ„Ñö‰πô",
                fairy: "·é™·è∞·è®·é†·é¨·é∞·èÄ·éª·é•·è†·è¶·èù·é∑·èÅ·éæ·è¢·é§·é°·èö·èñ·è¨·èâ·èî·åÄ·éΩ·èÉ",
                neon: "·ó©·ó∑·ëï·ó™E·ñ¥G·ïºI·íçK·í™·ó∞·ëéO·ë≠·ë´·ñáST·ëå·êØ·óØ·ô≠Y·òî",
                outlined: "‚í∂‚í∑‚í∏‚íπ‚í∫‚íª‚íº‚íΩ‚íæ‚íø‚ìÄ‚ìÅ‚ìÇ‚ìÉ‚ìÑ‚ìÖ‚ìÜ‚ìá‚ìà‚ìâ‚ìä‚ìã‚ìå‚ìç‚ìé‚ìè".toLowerCase(),
                mixed: "Œ±–≤¬¢‚àÇ—î∆íg–ΩŒπ◊†–∫‚Ñì–ºŒ∑œÉœÅq—è—ï—ÇœÖŒΩœâœá—Éz",
                circle: "üÑêüÑëüÑíüÑìüÑîüÑïüÑñüÑóüÑòüÑôüÑöüÑõüÑúüÑùüÑûüÑüüÑ†üÑ°üÑ¢üÑ£üÑ§üÑ•üÑ¶üÑßüÑ®üÑ©",
                triangle: "‚àÜ…ìœÇdŒµ“ì…†–Ω‡πÄ ù“°‚Ñì–º–∏œÉœÅ“©—è—ï—ÇœÖŒΩœâœá—Éz",
                heart: "…ë‚ô•b‚ô•c‚ô•d‚ô•e‚ô•f‚ô•g‚ô•h‚ô•i‚ô•j‚ô•k‚ô•l‚ô•m‚ô•n‚ô•o‚ô•p‚ô•q‚ô•r‚ô•s‚ô•t‚ô•u‚ô•v‚ô•w‚ô•x‚ô•y‚ô•z‚ô•",
                diamond: "a‚ô¶b‚ô¶c‚ô¶d‚ô¶e‚ô¶f‚ô¶g‚ô¶h‚ô¶i‚ô¶j‚ô¶k‚ô¶l‚ô¶m‚ô¶n‚ô¶o‚ô¶p‚ô¶q‚ô¶r‚ô¶s‚ô¶t‚ô¶u‚ô¶v‚ô¶w‚ô¶x‚ô¶y‚ô¶z‚ô¶",
                lightning: "Œ±‚ö°b‚ö°c‚ö°d‚ö°e‚ö°f‚ö°g‚ö°h‚ö°i‚ö°j‚ö°k‚ö°l‚ö°m‚ö°n‚ö°o‚ö°p‚ö°q‚ö°r‚ö°s‚ö°t‚ö°u‚ö°v‚ö°w‚ö°x‚ö°y‚ö°z",
                fire: "aüî•büî•cüî•düî•eüî•füî•güî•hüî•iüî•jüî•küî•lüî•müî•nüî•oüî•püî•qüî•rüî•süî•tüî•uüî•vüî•wüî•xüî•yüî•züî•",
            };

            const alphabet = "abcdefghijklmnopqrstuvwxyz";

            if (!fonts[styleName]) {
                const available = Object.keys(fonts).join(", ");
                return sock.sendMessage(
                    m.key.remoteJid,
                    { text: `‚ö†Ô∏è Unknown style: ${styleName}\n\nAvailable: ${available}` },
                    { quoted: m }
                );
            }

            const fontMap = fonts[styleName];

            const convert = (txt) =>
                txt.split("").map(ch => {
                    const idx = alphabet.indexOf(ch.toLowerCase());
                    if (idx !== -1 && fontMap[idx]) return fontMap[idx];
                    return ch;
                }).join("");

            const result = convert(text);

            await sock.sendMessage(
                m.key.remoteJid,
                { text: `‚ú® Style: ${styleName}\n\n${result}` },
                { quoted: m }
            );

        } catch (err) {
            console.error("‚ùå fancy2 error:", err);
            await sock.sendMessage(m.key.remoteJid, { text: "‚ö†Ô∏è Error generating fancy text." }, { quoted: m });
        }
    }
};
